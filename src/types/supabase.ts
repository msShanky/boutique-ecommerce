/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/user_order": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_order.id"];
          created_at?: parameters["rowFilter.user_order.created_at"];
          code?: parameters["rowFilter.user_order.code"];
          status_id?: parameters["rowFilter.user_order.status_id"];
          shipment_ref?: parameters["rowFilter.user_order.shipment_ref"];
          user_id?: parameters["rowFilter.user_order.user_id"];
          razorpay_order_id?: parameters["rowFilter.user_order.razorpay_order_id"];
          razorpay_payment_id?: parameters["rowFilter.user_order.razorpay_payment_id"];
          razorpay_signature?: parameters["rowFilter.user_order.razorpay_signature"];
          /** The relationship between an user order and their shipping information */
          user_shipping_address_id?: parameters["rowFilter.user_order.user_shipping_address_id"];
          cancel_reason?: parameters["rowFilter.user_order.cancel_reason"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_order"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_order */
          user_order?: definitions["user_order"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_order.id"];
          created_at?: parameters["rowFilter.user_order.created_at"];
          code?: parameters["rowFilter.user_order.code"];
          status_id?: parameters["rowFilter.user_order.status_id"];
          shipment_ref?: parameters["rowFilter.user_order.shipment_ref"];
          user_id?: parameters["rowFilter.user_order.user_id"];
          razorpay_order_id?: parameters["rowFilter.user_order.razorpay_order_id"];
          razorpay_payment_id?: parameters["rowFilter.user_order.razorpay_payment_id"];
          razorpay_signature?: parameters["rowFilter.user_order.razorpay_signature"];
          /** The relationship between an user order and their shipping information */
          user_shipping_address_id?: parameters["rowFilter.user_order.user_shipping_address_id"];
          cancel_reason?: parameters["rowFilter.user_order.cancel_reason"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_order.id"];
          created_at?: parameters["rowFilter.user_order.created_at"];
          code?: parameters["rowFilter.user_order.code"];
          status_id?: parameters["rowFilter.user_order.status_id"];
          shipment_ref?: parameters["rowFilter.user_order.shipment_ref"];
          user_id?: parameters["rowFilter.user_order.user_id"];
          razorpay_order_id?: parameters["rowFilter.user_order.razorpay_order_id"];
          razorpay_payment_id?: parameters["rowFilter.user_order.razorpay_payment_id"];
          razorpay_signature?: parameters["rowFilter.user_order.razorpay_signature"];
          /** The relationship between an user order and their shipping information */
          user_shipping_address_id?: parameters["rowFilter.user_order.user_shipping_address_id"];
          cancel_reason?: parameters["rowFilter.user_order.cancel_reason"];
        };
        body: {
          /** user_order */
          user_order?: definitions["user_order"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_shipping_address": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_shipping_address.id"];
          user_id?: parameters["rowFilter.user_shipping_address.user_id"];
          created_at?: parameters["rowFilter.user_shipping_address.created_at"];
          phone_number?: parameters["rowFilter.user_shipping_address.phone_number"];
          first_name?: parameters["rowFilter.user_shipping_address.first_name"];
          last_name?: parameters["rowFilter.user_shipping_address.last_name"];
          address?: parameters["rowFilter.user_shipping_address.address"];
          address_line_two?: parameters["rowFilter.user_shipping_address.address_line_two"];
          city?: parameters["rowFilter.user_shipping_address.city"];
          country?: parameters["rowFilter.user_shipping_address.country"];
          pin_code?: parameters["rowFilter.user_shipping_address.pin_code"];
          /** State of the the country that the user resides in */
          state?: parameters["rowFilter.user_shipping_address.state"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_shipping_address"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_shipping_address */
          user_shipping_address?: definitions["user_shipping_address"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_shipping_address.id"];
          user_id?: parameters["rowFilter.user_shipping_address.user_id"];
          created_at?: parameters["rowFilter.user_shipping_address.created_at"];
          phone_number?: parameters["rowFilter.user_shipping_address.phone_number"];
          first_name?: parameters["rowFilter.user_shipping_address.first_name"];
          last_name?: parameters["rowFilter.user_shipping_address.last_name"];
          address?: parameters["rowFilter.user_shipping_address.address"];
          address_line_two?: parameters["rowFilter.user_shipping_address.address_line_two"];
          city?: parameters["rowFilter.user_shipping_address.city"];
          country?: parameters["rowFilter.user_shipping_address.country"];
          pin_code?: parameters["rowFilter.user_shipping_address.pin_code"];
          /** State of the the country that the user resides in */
          state?: parameters["rowFilter.user_shipping_address.state"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_shipping_address.id"];
          user_id?: parameters["rowFilter.user_shipping_address.user_id"];
          created_at?: parameters["rowFilter.user_shipping_address.created_at"];
          phone_number?: parameters["rowFilter.user_shipping_address.phone_number"];
          first_name?: parameters["rowFilter.user_shipping_address.first_name"];
          last_name?: parameters["rowFilter.user_shipping_address.last_name"];
          address?: parameters["rowFilter.user_shipping_address.address"];
          address_line_two?: parameters["rowFilter.user_shipping_address.address_line_two"];
          city?: parameters["rowFilter.user_shipping_address.city"];
          country?: parameters["rowFilter.user_shipping_address.country"];
          pin_code?: parameters["rowFilter.user_shipping_address.pin_code"];
          /** State of the the country that the user resides in */
          state?: parameters["rowFilter.user_shipping_address.state"];
        };
        body: {
          /** user_shipping_address */
          user_shipping_address?: definitions["user_shipping_address"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_wishlist": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_wishlist.id"];
          created_at?: parameters["rowFilter.user_wishlist.created_at"];
          user_id?: parameters["rowFilter.user_wishlist.user_id"];
          product_id?: parameters["rowFilter.user_wishlist.product_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_wishlist"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_wishlist */
          user_wishlist?: definitions["user_wishlist"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_wishlist.id"];
          created_at?: parameters["rowFilter.user_wishlist.created_at"];
          user_id?: parameters["rowFilter.user_wishlist.user_id"];
          product_id?: parameters["rowFilter.user_wishlist.product_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_wishlist.id"];
          created_at?: parameters["rowFilter.user_wishlist.created_at"];
          user_id?: parameters["rowFilter.user_wishlist.user_id"];
          product_id?: parameters["rowFilter.user_wishlist.product_id"];
        };
        body: {
          /** user_wishlist */
          user_wishlist?: definitions["user_wishlist"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/order_status": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order_status.id"];
          status?: parameters["rowFilter.order_status.status"];
          created_at?: parameters["rowFilter.order_status.created_at"];
          status_text?: parameters["rowFilter.order_status.status_text"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["order_status"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** order_status */
          order_status?: definitions["order_status"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order_status.id"];
          status?: parameters["rowFilter.order_status.status"];
          created_at?: parameters["rowFilter.order_status.created_at"];
          status_text?: parameters["rowFilter.order_status.status_text"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order_status.id"];
          status?: parameters["rowFilter.order_status.status"];
          created_at?: parameters["rowFilter.order_status.created_at"];
          status_text?: parameters["rowFilter.order_status.status_text"];
        };
        body: {
          /** order_status */
          order_status?: definitions["order_status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_sub_category": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_sub_category.id"];
          created_at?: parameters["rowFilter.product_sub_category.created_at"];
          updated_at?: parameters["rowFilter.product_sub_category.updated_at"];
          name?: parameters["rowFilter.product_sub_category.name"];
          category_id?: parameters["rowFilter.product_sub_category.category_id"];
          /** Manages the nested relations within the sub category level */
          parent_id?: parameters["rowFilter.product_sub_category.parent_id"];
          /** The page link that should be generated for the the product sub category */
          page_link?: parameters["rowFilter.product_sub_category.page_link"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_sub_category"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_sub_category */
          product_sub_category?: definitions["product_sub_category"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_sub_category.id"];
          created_at?: parameters["rowFilter.product_sub_category.created_at"];
          updated_at?: parameters["rowFilter.product_sub_category.updated_at"];
          name?: parameters["rowFilter.product_sub_category.name"];
          category_id?: parameters["rowFilter.product_sub_category.category_id"];
          /** Manages the nested relations within the sub category level */
          parent_id?: parameters["rowFilter.product_sub_category.parent_id"];
          /** The page link that should be generated for the the product sub category */
          page_link?: parameters["rowFilter.product_sub_category.page_link"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_sub_category.id"];
          created_at?: parameters["rowFilter.product_sub_category.created_at"];
          updated_at?: parameters["rowFilter.product_sub_category.updated_at"];
          name?: parameters["rowFilter.product_sub_category.name"];
          category_id?: parameters["rowFilter.product_sub_category.category_id"];
          /** Manages the nested relations within the sub category level */
          parent_id?: parameters["rowFilter.product_sub_category.parent_id"];
          /** The page link that should be generated for the the product sub category */
          page_link?: parameters["rowFilter.product_sub_category.page_link"];
        };
        body: {
          /** product_sub_category */
          product_sub_category?: definitions["product_sub_category"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product.id"];
          created_at?: parameters["rowFilter.product.created_at"];
          code?: parameters["rowFilter.product.code"];
          images?: parameters["rowFilter.product.images"];
          category_id?: parameters["rowFilter.product.category_id"];
          description?: parameters["rowFilter.product.description"];
          title?: parameters["rowFilter.product.title"];
          sub_title?: parameters["rowFilter.product.sub_title"];
          purchase_price?: parameters["rowFilter.product.purchase_price"];
          msrp?: parameters["rowFilter.product.msrp"];
          /** manages the product discount percentage */
          product_discount?: parameters["rowFilter.product.product_discount"];
          /** Denotes whether */
          is_featured?: parameters["rowFilter.product.is_featured"];
          /** The product relation with product and the respective sub category id */
          sub_category_id?: parameters["rowFilter.product.sub_category_id"];
          /** The gender id relation with the product */
          gender_group_id?: parameters["rowFilter.product.gender_group_id"];
          /** The tags that would be displayed for users and used for fileting products */
          product_tags?: parameters["rowFilter.product.product_tags"];
          /** The page slug used to generate the list of product pages */
          page_link?: parameters["rowFilter.product.page_link"];
          /** The column to track if the product is published or not */
          is_published?: parameters["rowFilter.product.is_published"];
          /** The add on option available and the price */
          add_on?: parameters["rowFilter.product.add_on"];
          /** The specification of the product and the details behind the product */
          specification?: parameters["rowFilter.product.specification"];
          /** Post care tips and specifications to maintain the quality of the product schema */
          care_specs?: parameters["rowFilter.product.care_specs"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product */
          product?: definitions["product"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product.id"];
          created_at?: parameters["rowFilter.product.created_at"];
          code?: parameters["rowFilter.product.code"];
          images?: parameters["rowFilter.product.images"];
          category_id?: parameters["rowFilter.product.category_id"];
          description?: parameters["rowFilter.product.description"];
          title?: parameters["rowFilter.product.title"];
          sub_title?: parameters["rowFilter.product.sub_title"];
          purchase_price?: parameters["rowFilter.product.purchase_price"];
          msrp?: parameters["rowFilter.product.msrp"];
          /** manages the product discount percentage */
          product_discount?: parameters["rowFilter.product.product_discount"];
          /** Denotes whether */
          is_featured?: parameters["rowFilter.product.is_featured"];
          /** The product relation with product and the respective sub category id */
          sub_category_id?: parameters["rowFilter.product.sub_category_id"];
          /** The gender id relation with the product */
          gender_group_id?: parameters["rowFilter.product.gender_group_id"];
          /** The tags that would be displayed for users and used for fileting products */
          product_tags?: parameters["rowFilter.product.product_tags"];
          /** The page slug used to generate the list of product pages */
          page_link?: parameters["rowFilter.product.page_link"];
          /** The column to track if the product is published or not */
          is_published?: parameters["rowFilter.product.is_published"];
          /** The add on option available and the price */
          add_on?: parameters["rowFilter.product.add_on"];
          /** The specification of the product and the details behind the product */
          specification?: parameters["rowFilter.product.specification"];
          /** Post care tips and specifications to maintain the quality of the product schema */
          care_specs?: parameters["rowFilter.product.care_specs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product.id"];
          created_at?: parameters["rowFilter.product.created_at"];
          code?: parameters["rowFilter.product.code"];
          images?: parameters["rowFilter.product.images"];
          category_id?: parameters["rowFilter.product.category_id"];
          description?: parameters["rowFilter.product.description"];
          title?: parameters["rowFilter.product.title"];
          sub_title?: parameters["rowFilter.product.sub_title"];
          purchase_price?: parameters["rowFilter.product.purchase_price"];
          msrp?: parameters["rowFilter.product.msrp"];
          /** manages the product discount percentage */
          product_discount?: parameters["rowFilter.product.product_discount"];
          /** Denotes whether */
          is_featured?: parameters["rowFilter.product.is_featured"];
          /** The product relation with product and the respective sub category id */
          sub_category_id?: parameters["rowFilter.product.sub_category_id"];
          /** The gender id relation with the product */
          gender_group_id?: parameters["rowFilter.product.gender_group_id"];
          /** The tags that would be displayed for users and used for fileting products */
          product_tags?: parameters["rowFilter.product.product_tags"];
          /** The page slug used to generate the list of product pages */
          page_link?: parameters["rowFilter.product.page_link"];
          /** The column to track if the product is published or not */
          is_published?: parameters["rowFilter.product.is_published"];
          /** The add on option available and the price */
          add_on?: parameters["rowFilter.product.add_on"];
          /** The specification of the product and the details behind the product */
          specification?: parameters["rowFilter.product.specification"];
          /** Post care tips and specifications to maintain the quality of the product schema */
          care_specs?: parameters["rowFilter.product.care_specs"];
        };
        body: {
          /** product */
          product?: definitions["product"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Checks if the user is Admin or Not */
          is_admin?: parameters["rowFilter.profiles.is_admin"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Checks if the user is Admin or Not */
          is_admin?: parameters["rowFilter.profiles.is_admin"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Checks if the user is Admin or Not */
          is_admin?: parameters["rowFilter.profiles.is_admin"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_variant": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_variant.id"];
          created_at?: parameters["rowFilter.product_variant.created_at"];
          sku?: parameters["rowFilter.product_variant.sku"];
          size?: parameters["rowFilter.product_variant.size"];
          product_id?: parameters["rowFilter.product_variant.product_id"];
          inventory_count?: parameters["rowFilter.product_variant.inventory_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_variant"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_variant */
          product_variant?: definitions["product_variant"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_variant.id"];
          created_at?: parameters["rowFilter.product_variant.created_at"];
          sku?: parameters["rowFilter.product_variant.sku"];
          size?: parameters["rowFilter.product_variant.size"];
          product_id?: parameters["rowFilter.product_variant.product_id"];
          inventory_count?: parameters["rowFilter.product_variant.inventory_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_variant.id"];
          created_at?: parameters["rowFilter.product_variant.created_at"];
          sku?: parameters["rowFilter.product_variant.sku"];
          size?: parameters["rowFilter.product_variant.size"];
          product_id?: parameters["rowFilter.product_variant.product_id"];
          inventory_count?: parameters["rowFilter.product_variant.inventory_count"];
        };
        body: {
          /** product_variant */
          product_variant?: definitions["product_variant"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/order_item": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order_item.id"];
          created_at?: parameters["rowFilter.order_item.created_at"];
          order_id?: parameters["rowFilter.order_item.order_id"];
          variant_id?: parameters["rowFilter.order_item.variant_id"];
          product_id?: parameters["rowFilter.order_item.product_id"];
          price?: parameters["rowFilter.order_item.price"];
          discount?: parameters["rowFilter.order_item.discount"];
          quantity?: parameters["rowFilter.order_item.quantity"];
          add_on_details?: parameters["rowFilter.order_item.add_on_details"];
          /** Item price is  the sum of Addon Price and Items Price */
          item_price?: parameters["rowFilter.order_item.item_price"];
          inventory_action?: parameters["rowFilter.order_item.inventory_action"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["order_item"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** order_item */
          order_item?: definitions["order_item"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order_item.id"];
          created_at?: parameters["rowFilter.order_item.created_at"];
          order_id?: parameters["rowFilter.order_item.order_id"];
          variant_id?: parameters["rowFilter.order_item.variant_id"];
          product_id?: parameters["rowFilter.order_item.product_id"];
          price?: parameters["rowFilter.order_item.price"];
          discount?: parameters["rowFilter.order_item.discount"];
          quantity?: parameters["rowFilter.order_item.quantity"];
          add_on_details?: parameters["rowFilter.order_item.add_on_details"];
          /** Item price is  the sum of Addon Price and Items Price */
          item_price?: parameters["rowFilter.order_item.item_price"];
          inventory_action?: parameters["rowFilter.order_item.inventory_action"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order_item.id"];
          created_at?: parameters["rowFilter.order_item.created_at"];
          order_id?: parameters["rowFilter.order_item.order_id"];
          variant_id?: parameters["rowFilter.order_item.variant_id"];
          product_id?: parameters["rowFilter.order_item.product_id"];
          price?: parameters["rowFilter.order_item.price"];
          discount?: parameters["rowFilter.order_item.discount"];
          quantity?: parameters["rowFilter.order_item.quantity"];
          add_on_details?: parameters["rowFilter.order_item.add_on_details"];
          /** Item price is  the sum of Addon Price and Items Price */
          item_price?: parameters["rowFilter.order_item.item_price"];
          inventory_action?: parameters["rowFilter.order_item.inventory_action"];
        };
        body: {
          /** order_item */
          order_item?: definitions["order_item"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/gender_group": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.gender_group.id"];
          created_at?: parameters["rowFilter.gender_group.created_at"];
          updated_at?: parameters["rowFilter.gender_group.updated_at"];
          gender?: parameters["rowFilter.gender_group.gender"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["gender_group"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** gender_group */
          gender_group?: definitions["gender_group"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.gender_group.id"];
          created_at?: parameters["rowFilter.gender_group.created_at"];
          updated_at?: parameters["rowFilter.gender_group.updated_at"];
          gender?: parameters["rowFilter.gender_group.gender"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.gender_group.id"];
          created_at?: parameters["rowFilter.gender_group.created_at"];
          updated_at?: parameters["rowFilter.gender_group.updated_at"];
          gender?: parameters["rowFilter.gender_group.gender"];
        };
        body: {
          /** gender_group */
          gender_group?: definitions["gender_group"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/product_category": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_category.id"];
          created_at?: parameters["rowFilter.product_category.created_at"];
          category?: parameters["rowFilter.product_category.category"];
          description?: parameters["rowFilter.product_category.description"];
          /** contains the image to be displayed for the category */
          category_image?: parameters["rowFilter.product_category.category_image"];
          /** Manages the relationship between the gender group and the product category */
          gender_group_id?: parameters["rowFilter.product_category.gender_group_id"];
          /** The page link for the category items available within the system */
          page_link?: parameters["rowFilter.product_category.page_link"];
          /** The published flag to manage if the category is ready for user display */
          is_published?: parameters["rowFilter.product_category.is_published"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["product_category"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** product_category */
          product_category?: definitions["product_category"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_category.id"];
          created_at?: parameters["rowFilter.product_category.created_at"];
          category?: parameters["rowFilter.product_category.category"];
          description?: parameters["rowFilter.product_category.description"];
          /** contains the image to be displayed for the category */
          category_image?: parameters["rowFilter.product_category.category_image"];
          /** Manages the relationship between the gender group and the product category */
          gender_group_id?: parameters["rowFilter.product_category.gender_group_id"];
          /** The page link for the category items available within the system */
          page_link?: parameters["rowFilter.product_category.page_link"];
          /** The published flag to manage if the category is ready for user display */
          is_published?: parameters["rowFilter.product_category.is_published"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.product_category.id"];
          created_at?: parameters["rowFilter.product_category.created_at"];
          category?: parameters["rowFilter.product_category.category"];
          description?: parameters["rowFilter.product_category.description"];
          /** contains the image to be displayed for the category */
          category_image?: parameters["rowFilter.product_category.category_image"];
          /** Manages the relationship between the gender group and the product category */
          gender_group_id?: parameters["rowFilter.product_category.gender_group_id"];
          /** The page link for the category items available within the system */
          page_link?: parameters["rowFilter.product_category.page_link"];
          /** The published flag to manage if the category is ready for user display */
          is_published?: parameters["rowFilter.product_category.is_published"];
        };
        body: {
          /** product_category */
          product_category?: definitions["product_category"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Manages the user's orders and the items */
  user_order: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    code?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `order_status.id`.<fk table='order_status' column='id'/>
     */
    status_id?: number;
    /** Format: text */
    shipment_ref?: string;
    /** Format: uuid */
    user_id?: string;
    /** Format: character varying */
    razorpay_order_id?: string;
    /** Format: character varying */
    razorpay_payment_id?: string;
    /** Format: character varying */
    razorpay_signature?: string;
    /**
     * Format: bigint
     * @description The relationship between an user order and their shipping information
     *
     * Note:
     * This is a Foreign Key to `user_shipping_address.id`.<fk table='user_shipping_address' column='id'/>
     */
    user_shipping_address_id?: number;
    /** Format: text */
    cancel_reason?: string;
  };
  /** @description Contains the user shipping information for each instance created */
  user_shipping_address: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    user_id?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    phone_number?: string;
    /** Format: text */
    first_name?: string;
    /** Format: text */
    last_name?: string;
    /** Format: character varying */
    address?: string;
    /** Format: character varying */
    address_line_two?: string;
    /** Format: text */
    city?: string;
    /** Format: text */
    country?: string;
    /** Format: text */
    pin_code?: string;
    /**
     * Format: text
     * @description State of the the country that the user resides in
     */
    state?: string;
  };
  user_wishlist: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `product.id`.<fk table='product' column='id'/>
     */
    product_id?: number;
  };
  /** @description Manages the order status for the application and track the items */
  order_status: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    status?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    status_text?: string;
  };
  /** @description Manages the sub category for the categories available in the application */
  product_sub_category: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: character varying */
    name?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `product_category.id`.<fk table='product_category' column='id'/>
     */
    category_id: number;
    /**
     * Format: bigint
     * @description Manages the nested relations within the sub category level
     *
     * Note:
     * This is a Foreign Key to `product_sub_category.id`.<fk table='product_sub_category' column='id'/>
     */
    parent_id?: number;
    /**
     * Format: text
     * @description The page link that should be generated for the the product sub category
     */
    page_link?: string;
  };
  /** @description Maintains the product information of breeze */
  product: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: numeric */
    code?: number;
    /** Format: text[] */
    images?: string[];
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `product_category.id`.<fk table='product_category' column='id'/>
     */
    category_id?: number;
    /** Format: character varying */
    description?: string;
    /** Format: text */
    title?: string;
    /** Format: text */
    sub_title?: string;
    /** Format: numeric */
    purchase_price?: number;
    /** Format: numeric */
    msrp?: number;
    /**
     * Format: bigint
     * @description manages the product discount percentage
     */
    product_discount?: number;
    /**
     * Format: boolean
     * @description Denotes whether
     * @default false
     */
    is_featured?: boolean;
    /**
     * Format: bigint
     * @description The product relation with product and the respective sub category id
     *
     * Note:
     * This is a Foreign Key to `product_sub_category.id`.<fk table='product_sub_category' column='id'/>
     */
    sub_category_id?: number;
    /**
     * Format: bigint
     * @description The gender id relation with the product
     *
     * Note:
     * This is a Foreign Key to `gender_group.id`.<fk table='gender_group' column='id'/>
     */
    gender_group_id?: number;
    /**
     * Format: text[]
     * @description The tags that would be displayed for users and used for fileting products
     */
    product_tags?: string[];
    /**
     * Format: text
     * @description The page slug used to generate the list of product pages
     */
    page_link?: string;
    /**
     * Format: boolean
     * @description The column to track if the product is published or not
     * @default false
     */
    is_published: boolean;
    /**
     * Format: jsonb
     * @description The add on option available and the price
     */
    add_on?: unknown;
    /**
     * Format: jsonb
     * @description The specification of the product and the details behind the product
     */
    specification?: unknown;
    /**
     * Format: jsonb
     * @description Post care tips and specifications to maintain the quality of the product schema
     */
    care_specs?: unknown;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: boolean
     * @description Checks if the user is Admin or Not
     */
    is_admin?: boolean;
  };
  /** @description Maintains the product variant of each product */
  product_variant: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: bigint */
    sku?: number;
    /** Format: text */
    size?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `product.id`.<fk table='product' column='id'/>
     */
    product_id?: number;
    /** Format: bigint */
    inventory_count?: number;
  };
  /** @description manages the order items for a specific order */
  order_item: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user_order.id`.<fk table='user_order' column='id'/>
     */
    order_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `product_variant.id`.<fk table='product_variant' column='id'/>
     */
    variant_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `product.id`.<fk table='product' column='id'/>
     */
    product_id?: number;
    /** Format: bigint */
    price?: number;
    /** Format: bigint */
    discount?: number;
    /** Format: bigint */
    quantity?: number;
    /** Format: jsonb */
    add_on_details?: unknown;
    /**
     * Format: numeric
     * @description Item price is  the sum of Addon Price and Items Price
     */
    item_price?: number;
    /**
     * Format: boolean
     * @default false
     */
    inventory_action?: boolean;
  };
  /** @description Maintains the gender group available within the application */
  gender_group: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: character varying */
    gender?: string;
  };
  /** @description Contains the product category for the boutique */
  product_category: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    category?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: text
     * @description contains the image to be displayed for the category
     */
    category_image?: string;
    /**
     * Format: bigint
     * @description Manages the relationship between the gender group and the product category
     *
     * Note:
     * This is a Foreign Key to `gender_group.id`.<fk table='gender_group' column='id'/>
     */
    gender_group_id?: number;
    /**
     * Format: text
     * @description The page link for the category items available within the system
     */
    page_link?: string;
    /**
     * Format: boolean
     * @description The published flag to manage if the category is ready for user display
     * @default false
     */
    is_published: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description user_order */
  "body.user_order": definitions["user_order"];
  /** Format: bigint */
  "rowFilter.user_order.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_order.created_at": string;
  /** Format: text */
  "rowFilter.user_order.code": string;
  /** Format: bigint */
  "rowFilter.user_order.status_id": string;
  /** Format: text */
  "rowFilter.user_order.shipment_ref": string;
  /** Format: uuid */
  "rowFilter.user_order.user_id": string;
  /** Format: character varying */
  "rowFilter.user_order.razorpay_order_id": string;
  /** Format: character varying */
  "rowFilter.user_order.razorpay_payment_id": string;
  /** Format: character varying */
  "rowFilter.user_order.razorpay_signature": string;
  /**
   * Format: bigint
   * @description The relationship between an user order and their shipping information
   */
  "rowFilter.user_order.user_shipping_address_id": string;
  /** Format: text */
  "rowFilter.user_order.cancel_reason": string;
  /** @description user_shipping_address */
  "body.user_shipping_address": definitions["user_shipping_address"];
  /** Format: bigint */
  "rowFilter.user_shipping_address.id": string;
  /** Format: uuid */
  "rowFilter.user_shipping_address.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_shipping_address.created_at": string;
  /** Format: text */
  "rowFilter.user_shipping_address.phone_number": string;
  /** Format: text */
  "rowFilter.user_shipping_address.first_name": string;
  /** Format: text */
  "rowFilter.user_shipping_address.last_name": string;
  /** Format: character varying */
  "rowFilter.user_shipping_address.address": string;
  /** Format: character varying */
  "rowFilter.user_shipping_address.address_line_two": string;
  /** Format: text */
  "rowFilter.user_shipping_address.city": string;
  /** Format: text */
  "rowFilter.user_shipping_address.country": string;
  /** Format: text */
  "rowFilter.user_shipping_address.pin_code": string;
  /**
   * Format: text
   * @description State of the the country that the user resides in
   */
  "rowFilter.user_shipping_address.state": string;
  /** @description user_wishlist */
  "body.user_wishlist": definitions["user_wishlist"];
  /** Format: bigint */
  "rowFilter.user_wishlist.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_wishlist.created_at": string;
  /** Format: uuid */
  "rowFilter.user_wishlist.user_id": string;
  /** Format: bigint */
  "rowFilter.user_wishlist.product_id": string;
  /** @description order_status */
  "body.order_status": definitions["order_status"];
  /** Format: bigint */
  "rowFilter.order_status.id": string;
  /** Format: text */
  "rowFilter.order_status.status": string;
  /** Format: timestamp with time zone */
  "rowFilter.order_status.created_at": string;
  /** Format: text */
  "rowFilter.order_status.status_text": string;
  /** @description product_sub_category */
  "body.product_sub_category": definitions["product_sub_category"];
  /** Format: bigint */
  "rowFilter.product_sub_category.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_sub_category.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_sub_category.updated_at": string;
  /** Format: character varying */
  "rowFilter.product_sub_category.name": string;
  /** Format: bigint */
  "rowFilter.product_sub_category.category_id": string;
  /**
   * Format: bigint
   * @description Manages the nested relations within the sub category level
   */
  "rowFilter.product_sub_category.parent_id": string;
  /**
   * Format: text
   * @description The page link that should be generated for the the product sub category
   */
  "rowFilter.product_sub_category.page_link": string;
  /** @description product */
  "body.product": definitions["product"];
  /** Format: bigint */
  "rowFilter.product.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product.created_at": string;
  /** Format: numeric */
  "rowFilter.product.code": string;
  /** Format: text[] */
  "rowFilter.product.images": string;
  /** Format: bigint */
  "rowFilter.product.category_id": string;
  /** Format: character varying */
  "rowFilter.product.description": string;
  /** Format: text */
  "rowFilter.product.title": string;
  /** Format: text */
  "rowFilter.product.sub_title": string;
  /** Format: numeric */
  "rowFilter.product.purchase_price": string;
  /** Format: numeric */
  "rowFilter.product.msrp": string;
  /**
   * Format: bigint
   * @description manages the product discount percentage
   */
  "rowFilter.product.product_discount": string;
  /**
   * Format: boolean
   * @description Denotes whether
   */
  "rowFilter.product.is_featured": string;
  /**
   * Format: bigint
   * @description The product relation with product and the respective sub category id
   */
  "rowFilter.product.sub_category_id": string;
  /**
   * Format: bigint
   * @description The gender id relation with the product
   */
  "rowFilter.product.gender_group_id": string;
  /**
   * Format: text[]
   * @description The tags that would be displayed for users and used for fileting products
   */
  "rowFilter.product.product_tags": string;
  /**
   * Format: text
   * @description The page slug used to generate the list of product pages
   */
  "rowFilter.product.page_link": string;
  /**
   * Format: boolean
   * @description The column to track if the product is published or not
   */
  "rowFilter.product.is_published": string;
  /**
   * Format: jsonb
   * @description The add on option available and the price
   */
  "rowFilter.product.add_on": string;
  /**
   * Format: jsonb
   * @description The specification of the product and the details behind the product
   */
  "rowFilter.product.specification": string;
  /**
   * Format: jsonb
   * @description Post care tips and specifications to maintain the quality of the product schema
   */
  "rowFilter.product.care_specs": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /**
   * Format: boolean
   * @description Checks if the user is Admin or Not
   */
  "rowFilter.profiles.is_admin": string;
  /** @description product_variant */
  "body.product_variant": definitions["product_variant"];
  /** Format: bigint */
  "rowFilter.product_variant.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_variant.created_at": string;
  /** Format: bigint */
  "rowFilter.product_variant.sku": string;
  /** Format: text */
  "rowFilter.product_variant.size": string;
  /** Format: bigint */
  "rowFilter.product_variant.product_id": string;
  /** Format: bigint */
  "rowFilter.product_variant.inventory_count": string;
  /** @description order_item */
  "body.order_item": definitions["order_item"];
  /** Format: bigint */
  "rowFilter.order_item.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.order_item.created_at": string;
  /** Format: bigint */
  "rowFilter.order_item.order_id": string;
  /** Format: bigint */
  "rowFilter.order_item.variant_id": string;
  /** Format: bigint */
  "rowFilter.order_item.product_id": string;
  /** Format: bigint */
  "rowFilter.order_item.price": string;
  /** Format: bigint */
  "rowFilter.order_item.discount": string;
  /** Format: bigint */
  "rowFilter.order_item.quantity": string;
  /** Format: jsonb */
  "rowFilter.order_item.add_on_details": string;
  /**
   * Format: numeric
   * @description Item price is  the sum of Addon Price and Items Price
   */
  "rowFilter.order_item.item_price": string;
  /** Format: boolean */
  "rowFilter.order_item.inventory_action": string;
  /** @description gender_group */
  "body.gender_group": definitions["gender_group"];
  /** Format: bigint */
  "rowFilter.gender_group.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.gender_group.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.gender_group.updated_at": string;
  /** Format: character varying */
  "rowFilter.gender_group.gender": string;
  /** @description product_category */
  "body.product_category": definitions["product_category"];
  /** Format: bigint */
  "rowFilter.product_category.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.product_category.created_at": string;
  /** Format: text */
  "rowFilter.product_category.category": string;
  /** Format: text */
  "rowFilter.product_category.description": string;
  /**
   * Format: text
   * @description contains the image to be displayed for the category
   */
  "rowFilter.product_category.category_image": string;
  /**
   * Format: bigint
   * @description Manages the relationship between the gender group and the product category
   */
  "rowFilter.product_category.gender_group_id": string;
  /**
   * Format: text
   * @description The page link for the category items available within the system
   */
  "rowFilter.product_category.page_link": string;
  /**
   * Format: boolean
   * @description The published flag to manage if the category is ready for user display
   */
  "rowFilter.product_category.is_published": string;
}

export interface operations {}

export interface external {}
